name: Run Ollama with Loophole & Tunnel Monitor

on:
  workflow_dispatch:  # Manual trigger
  schedule:
    - cron: '0 */6 * * *'  # Run every 6 hours

jobs:
  run-ollama:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt update
          sudo apt install -y wget curl openssh-client python3 python3-pip
          pip3 install requests

      - name: Install Ollama
        run: |
          curl -fsSL https://ollama.com/install.sh | sh
          echo "Ollama installed successfully!"

      - name: Kill Any Existing Ollama Process
        run: |
          if pgrep -x "ollama" > /dev/null; then
            echo "Ollama is already running. Stopping it..."
            sudo pkill -9 ollama || true  # Force kill if needed, ignore errors
            sleep 5
          fi

      - name: Start Ollama
        run: |
          echo "Starting Ollama..."
          nohup ollama serve > ollama.log 2>&1 &  # Run Ollama in the background
          sleep 10

      - name: Pull DeepSeek Model
        run: |
          echo "Downloading deepseek-r1:1.5b model..."
          ollama run deepseek-r1:1.5b &
          sleep 10

      - name: Download Tunnel Monitor Script
        run: |
          cat <<EOF > tunnel_monitor.py
          import subprocess
          import re
          import requests
          import time

          WEBHOOK_URL = "http://rncez-49-35-193-236.a.free.pinggy.link/update_tunnel"

          SSH_COMMAND = [
              "ssh", "-p", "443", "-R0:localhost:11434",
              "qr@a.pinggy.io", "u:Host:localhost:11434"
          ]

          URL_PATTERN = re.compile(r"https?://[a-zA-Z0-9.-]+\.pinggy\.link")

          def send_tunnel_url(url):
              try:
                  response = requests.post(WEBHOOK_URL, json={"tunnel_url": url}, timeout=10)
                  response.raise_for_status()
                  print(f"[‚úÖ] Successfully sent tunnel URL: {url}")
              except requests.RequestException as e:
                  print(f"[‚ùå] Failed to send tunnel URL: {e}")

          def start_tunnel():
              while True:
                  print("[üîÑ] Restarting SSH tunnel...")

                  process = subprocess.Popen(SSH_COMMAND, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True)

                  for line in process.stdout:
                      print(line.strip())

                      match = URL_PATTERN.search(line)
                      if match:
                          tunnel_url = match.group(0)
                          print(f"[üåê] Tunnel URL Detected: {tunnel_url}")
                          send_tunnel_url(tunnel_url)

                  print("[‚è≥] Sleeping for 60 minutes before restarting...")
                  time.sleep(3600)

          if __name__ == "__main__":
              start_tunnel()
          EOF

      - name: Run Tunnel Monitor
        run: |
          pip3 install requests
          python3 tunnel_monitor.py &
          echo "Tunnel monitor started in background!"

      - name: Keep Alive
        run: |
          echo "Keeping workflow alive for 5 hours 45 minutes..."
          sleep 20700
