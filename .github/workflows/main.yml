name: Run Ollama 
 
on: 
  workflow_dispatch:  # Manual trigger 
  schedule: 
    - cron: '0 */6 * * *'  # Run every 6 hours 
 
jobs: 
  run-ollama: 
    runs-on: ubuntu-latest 
 
    steps: 
      - name: Checkout repository 
        uses: actions/checkout@v4 
 
      - name: Install Node.js 
        uses: actions/setup-node@v4 
        with: 
          node-version: '20' 
 
      - name: Install dependencies 
        run: sudo apt update && sudo apt install -y wget curl openssh-client 
 
      - name: Install Ollama 
        run: | 
          curl -fsSL https://ollama.com/install.sh | sh 
          echo "Ollama installed successfully!" 
 
      - name: Kill Any Existing Ollama Process 
        run: | 
          if pgrep -x "ollama" > /dev/null; then 
            echo "Ollama is already running. Stopping it..." 
            sudo pkill -9 ollama || true  # Force kill if needed, ignore errors 
            sleep 5 
          fi 
 
      - name: Start Ollama 
        run: | 
          echo "Starting Ollama..." 
          nohup ollama serve > ollama.log 2>&1 &  # Run Ollama in the background 
          sleep 10 
 
      - name: Pull DeepSeek Model 
        run: | 
          echo "Downloading deepseek-r1:1.5b model..." 
          ollama run deepseek-r1:1.5b & 
          sleep 10 
 
      - name: Start and Monitor Tunnel
        run: |
          start_new_tunnel() {
            echo "Setting up SSH configuration..."
            mkdir -p ~/.ssh
            echo -e "Host a.pinggy.io\n\tStrictHostKeyChecking no\n\tUserKnownHostsFile=/dev/null\n" >> ~/.ssh/config
            
            echo "Starting SSH tunnel..."
            # Capture the SSH output to a temporary file
            ssh -p 443 -R0:localhost:11434 qr@a.pinggy.io "u:Host:localhost:11434" > tunnel_output.txt 2>&1 &
            
            sleep 10
            
            # Extract the HTTPS URL from the output
            TUNNEL_URL=$(grep "https://" tunnel_output.txt | tail -n 1)
            
            if [ ! -z "$TUNNEL_URL" ]; then
              echo "Tunnel URL found: $TUNNEL_URL"
              # Send the URL to your webserver (replace YOUR_WEBSERVER_URL with actual URL)
              curl -X POST -H "Content-Type: application/json" \
                -d "{\"tunnel_url\": \"$TUNNEL_URL\"}" \
                https://rnwod-49-35-193-236.a.free.pinggy.link/update_tunnel
              
              echo "URL sent to webserver successfully!"
            else
              echo "Failed to extract tunnel URL"
            fi
            
            echo "SSH tunnel started successfully!"
          }
 
      - name: Verify Tunnel 
        run: | 
          echo "Checking tunnel status..." 
          curl -I https://a.pinggy.io || echo "Tunnel might not be active!" 
          curl https://ipv4.icanhazip.com/ 
 
      - name: Keep Alive with Periodic SSH Tunnel Refresh
        run: |
          end_time=$((SECONDS + 20700))  # 5 hours and 45 minutes in seconds
          interval=$((60 * 60))  # 60 minutes in seconds
          
          while [ $SECONDS -lt $end_time ]; do
            # Kill existing SSH tunnel
            pkill -f "ssh -p 443 -R0:localhost:11434" || true
            
            # Start new SSH tunnel and post URL
            start_new_tunnel
            
            # Sleep for the interval (60 minutes) or until we reach the end time
            remaining_time=$((end_time - SECONDS))
            sleep_time=$((interval < remaining_time ? interval : remaining_time))
            sleep $sleep_time
          done
